// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasmvision {
  #[allow(dead_code)]
  pub mod platform {
    #[allow(dead_code, clippy::all)]
    pub mod time {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[allow(unused_unsafe, clippy::all)]
      /// Get the current time in milliseconds since the Unix epoch. Use 0 for the `tz` parameter for now.
      pub fn now(tz: u32,) -> u64{
        unsafe {

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/time")]
          extern "C" {
            #[link_name = "now"]
            fn wit_import(_: i32, ) -> i64;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ) -> i64{ unreachable!() }
          let ret = wit_import(_rt::as_i32(&tz));
          ret as u64
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod logging {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      #[allow(unused_unsafe, clippy::all)]
      /// DEPRECATED: Log a message on the host.
      /// Instead use error, warn, info, or debug.
      pub fn log(msg: &str,){
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/logging")]
          extern "C" {
            #[link_name = "log"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Log an error on the host.
      pub fn error(msg: &str,){
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/logging")]
          extern "C" {
            #[link_name = "error"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Log a warning on the host.
      pub fn warn(msg: &str,){
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/logging")]
          extern "C" {
            #[link_name = "warn"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Log some non-critical information on the host.
      pub fn info(msg: &str,){
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/logging")]
          extern "C" {
            #[link_name = "info"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Log some debugging info on the host.
      pub fn debug(msg: &str,){
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/logging")]
          extern "C" {
            #[link_name = "debug"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Print a message on the host. Intended to bypassing the normal logging system.
      pub fn println(msg: &str,){
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/logging")]
          extern "C" {
            #[link_name = "println"]
            fn wit_import(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0);
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod config {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum ConfigError {
        /// success, all is well.
        Success,
        /// The requested key does not exist in the configuration.
        NoSuchKey,
      }
      impl ConfigError{
        pub fn name(&self) -> &'static str {
          match self {
            ConfigError::Success => "success",
            ConfigError::NoSuchKey => "no-such-key",
          }
        }
        pub fn message(&self) -> &'static str {
          match self {
            ConfigError::Success => "success, all is well.",
            ConfigError::NoSuchKey => "The requested key does not exist in the configuration.",
          }
        }
      }
      impl ::core::fmt::Debug for ConfigError{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("ConfigError")
          .field("code", &(*self as i32))
          .field("name", &self.name())
          .field("message", &self.message())
          .finish()
        }
      }
      impl ::core::fmt::Display for ConfigError{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{} (error {})", self.name(), *self as i32)
        }
      }

      impl std::error::Error for ConfigError {}

      impl ConfigError{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> ConfigError{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => ConfigError::Success,
            1 => ConfigError::NoSuchKey,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      #[allow(unused_unsafe, clippy::all)]
      pub fn get_config(key: &str,) -> Result<_rt::String,ConfigError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let vec0 = key;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/config")]
          extern "C" {
            #[link_name = "get-config"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1);
          let l2 = i32::from(*ptr1.add(0).cast::<u8>());
          match l2 {
            0 => {
              let e = {
                let l3 = *ptr1.add(4).cast::<*mut u8>();
                let l4 = *ptr1.add(8).cast::<usize>();
                let len5 = l4;
                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                _rt::string_lift(bytes5)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l6 = i32::from(*ptr1.add(4).cast::<u8>());

                ConfigError::_lift(l6 as u8)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod http {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// HTTP errors returned by the runtime.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum HttpError {
        Success,
        DestinationNotAllowed,
        InvalidUrl,
        RequestError,
        RuntimeError,
        TooManyRequests,
      }
      impl HttpError{
        pub fn name(&self) -> &'static str {
          match self {
            HttpError::Success => "success",
            HttpError::DestinationNotAllowed => "destination-not-allowed",
            HttpError::InvalidUrl => "invalid-url",
            HttpError::RequestError => "request-error",
            HttpError::RuntimeError => "runtime-error",
            HttpError::TooManyRequests => "too-many-requests",
          }
        }
        pub fn message(&self) -> &'static str {
          match self {
            HttpError::Success => "",
            HttpError::DestinationNotAllowed => "",
            HttpError::InvalidUrl => "",
            HttpError::RequestError => "",
            HttpError::RuntimeError => "",
            HttpError::TooManyRequests => "",
          }
        }
      }
      impl ::core::fmt::Debug for HttpError{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("HttpError")
          .field("code", &(*self as i32))
          .field("name", &self.name())
          .field("message", &self.message())
          .finish()
        }
      }
      impl ::core::fmt::Display for HttpError{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{} (error {})", self.name(), *self as i32)
        }
      }

      impl std::error::Error for HttpError {}

      impl HttpError{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> HttpError{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => HttpError::Success,
            1 => HttpError::DestinationNotAllowed,
            2 => HttpError::InvalidUrl,
            3 => HttpError::RequestError,
            4 => HttpError::RuntimeError,
            5 => HttpError::TooManyRequests,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      #[allow(unused_unsafe, clippy::all)]
      /// Get the content at the specified URL.
      /// Returns either the content or an error.
      pub fn get(url: &str,) -> Result<_rt::Vec::<u8>,HttpError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let vec0 = url;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/http")]
          extern "C" {
            #[link_name = "get"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1);
          let l2 = i32::from(*ptr1.add(0).cast::<u8>());
          match l2 {
            0 => {
              let e = {
                let l3 = *ptr1.add(4).cast::<*mut u8>();
                let l4 = *ptr1.add(8).cast::<usize>();
                let len5 = l4;

                _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l6 = i32::from(*ptr1.add(4).cast::<u8>());

                HttpError::_lift(l6 as u8)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Post the content to the specified URL.
      /// Returns either the response content or an error.
      pub fn post(url: &str,content_type: &str,body: &[u8],) -> Result<_rt::Vec::<u8>,HttpError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let vec0 = url;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let vec1 = content_type;
          let ptr1 = vec1.as_ptr().cast::<u8>();
          let len1 = vec1.len();
          let vec2 = body;
          let ptr2 = vec2.as_ptr().cast::<u8>();
          let len2 = vec2.len();
          let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/http")]
          extern "C" {
            #[link_name = "post"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2, ptr3);
          let l4 = i32::from(*ptr3.add(0).cast::<u8>());
          match l4 {
            0 => {
              let e = {
                let l5 = *ptr3.add(4).cast::<*mut u8>();
                let l6 = *ptr3.add(8).cast::<usize>();
                let len7 = l6;

                _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l8 = i32::from(*ptr3.add(4).cast::<u8>());

                HttpError::_lift(l8 as u8)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Post the image to the specified URL.
      /// Template is the template to use to send the image.
      /// If the content-type is image/jpeg or image/png, the template is ignored, and the image is simply converted and sent in that format.
      /// Otherwise, the template is used to convert the image to the desired format using simple substitution of the symbol %IMAGE%
      /// after base64 encoding the image.
      /// The response-item is the item in the response to return. Usually this will be a JSON element that will be parsed.
      /// Mat is the reference to to the Mat to use.
      pub fn post_image(url: &str,content_type: &str,request_template: &[u8],response_item: &str,mat: u32,) -> Result<_rt::Vec::<u8>,HttpError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let vec0 = url;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let vec1 = content_type;
          let ptr1 = vec1.as_ptr().cast::<u8>();
          let len1 = vec1.len();
          let vec2 = request_template;
          let ptr2 = vec2.as_ptr().cast::<u8>();
          let len2 = vec2.len();
          let vec3 = response_item;
          let ptr3 = vec3.as_ptr().cast::<u8>();
          let len3 = vec3.len();
          let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/http")]
          extern "C" {
            #[link_name = "post-image"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: i32, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: i32, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2, ptr3.cast_mut(), len3, _rt::as_i32(&mat), ptr4);
          let l5 = i32::from(*ptr4.add(0).cast::<u8>());
          match l5 {
            0 => {
              let e = {
                let l6 = *ptr4.add(4).cast::<*mut u8>();
                let l7 = *ptr4.add(8).cast::<usize>();
                let len8 = l7;

                _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l9 = i32::from(*ptr4.add(4).cast::<u8>());

                HttpError::_lift(l9 as u8)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }

    }

  }
}
mod _rt {

  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  pub use alloc_crate::string::String;
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      core::hint::unreachable_unchecked()
    }
  }
  extern crate alloc as alloc_crate;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.32.0:wasmvision:platform:imports:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 706] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc4\x04\x01A\x02\x01\
A\x08\x01B\x02\x01@\x01\x02tzy\0w\x04\0\x03now\x01\0\x03\0\x18wasmvision:platfor\
m/time\x05\0\x01B\x07\x01@\x01\x03msgs\x01\0\x04\0\x03log\x01\0\x04\0\x05error\x01\
\0\x04\0\x04warn\x01\0\x04\0\x04info\x01\0\x04\0\x05debug\x01\0\x04\0\x07println\
\x01\0\x03\0\x1bwasmvision:platform/logging\x05\x01\x01B\x05\x01m\x02\x07success\
\x0bno-such-key\x04\0\x0cconfig-error\x03\0\0\x01j\x01s\x01\x01\x01@\x01\x03keys\
\0\x02\x04\0\x0aget-config\x01\x03\x03\0\x1awasmvision:platform/config\x05\x02\x01\
B\x0a\x01m\x06\x07success\x17destination-not-allowed\x0binvalid-url\x0drequest-e\
rror\x0druntime-error\x11too-many-requests\x04\0\x0ahttp-error\x03\0\0\x01p}\x01\
j\x01\x02\x01\x01\x01@\x01\x03urls\0\x03\x04\0\x03get\x01\x04\x01@\x03\x03urls\x0c\
content-types\x04body\x02\0\x03\x04\0\x04post\x01\x05\x01@\x05\x03urls\x0cconten\
t-types\x10request-template\x02\x0dresponse-items\x03maty\0\x03\x04\0\x0apost-im\
age\x01\x06\x03\0\x18wasmvision:platform/http\x05\x03\x04\0\x1bwasmvision:platfo\
rm/imports\x04\0\x0b\x0d\x01\0\x07imports\x03\0\0\0G\x09producers\x01\x0cprocess\
ed-by\x02\x0dwit-component\x070.217.0\x10wit-bindgen-rust\x060.32.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

